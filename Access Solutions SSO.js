import AA1_Getters_Setters from '../../POM/GettersAndSetters'
import AccessSolutionsSingleSignOn from '../../POM/AccessSolutions'
import LaunchUrl from '../../POM/LoginPage'
import api from '../../POM/APIRequests'

const LoginPage = new LaunchUrl()

const AA1 = new AA1_Getters_Setters()
const AS = new AccessSolutionsSingleSignOn()
const API = new api()

const Plugin = require('../../plugins/azure-ad-sso/PluginVariables')

afterEach(() => {
  LoginPage.Pause(5)
})

describe(AA1.TC5_DESC, function() {

  it(AA1.TC5_STEP1_DESC, function() {
//=====================================================================

 cy.request({
  method: 'POST',
  url: 'https://backend-us-contracting-aa1-test.nah-devapps.am.boehringer.com/api/cp-program/generate-report',
  body: {
    scenarios: [
        {
            ccMaximumBuydown: 0,
            ccTargetCopay: 0,
            evEligibilityCeiling: 0,
            evEligibilityFloor: 0,
            evMaximumBuydown: 0,
            evTargetCopay: 0,
            id: "base",
            netPrice: 122
        },
        {
            ccMaximumBuydown: 175,
            ccTargetCopay: 10,
            evEligibilityCeiling: 125,
            evEligibilityFloor: 60,
            evMaximumBuydown: 40,
            evTargetCopay: 34,
            id: "currentNTT",
            netPrice: 122
        },
        {
            ccMaximumBuydown: 175,
            ccTargetCopay: 10,
            evEligibilityCeiling: 125,
            evEligibilityFloor: 60,
            evMaximumBuydown: 40,
            evTargetCopay: 34,
            id: "currentGF",
            netPrice: 122
        },
        {
            id: 1,
            ccMaximumBuydown: 100,
            ccTargetCopay: 0,
            evEligibilityCeiling: 100,
            evEligibilityFloor: 30,
            evMaximumBuydown: 80,
            evTargetCopay: 20,
            netPrice: 10
        }
    ],
    dos: "30",
    product: "JARDIANCE",
    programTerm: [
        "2022-6-30",
        "2023-6-30"
    ],
    relayDate: "2022-6-30",
    cohortStartDate: "2021-7-31"
},
headers: {
  "X-USER-IDENTITY": "crisdumar.de_la_rosa.ext@boehringer-ingelheim.com",
  "Content-Type": "application/json"
}

}).then( (response) => { 

          let processId = response.body['process_id']
          cy.log('process_id ===== ' + processId)
cy.wait(3000)
         
cy.request({
            method: 'GET',
            url: 'https://backend-us-contracting-aa1-test.nah-devapps.am.boehringer.com/api/queue/get-user-program',
            headers: {
              "X-USER-IDENTITY": "crisdumar.de_la_rosa.ext@boehringer-ingelheim.com",
              "Content-Type": "application/json"
            }
             
          }).then( (content) => {

               let running = content.body['running']['CP']

               cy.log('CP Running Status ====>>>>>>' + running)

          })
cy.log('PROCES iD GENERATED WITHIN THE REQUEST TO GENERATE REPORT: ' + processId)
//processId = '9ef0e43bf87a1ada0270d974c3ca86436c295735' //='9bbdfa93e3c39ddc3b5deaabc9f05208e9002bd0'
cy.log('PROCES iD GENERATED by the browser in the front page after clicking the Eval button: ' + processId)
cy.wait(210000)
          cy.request({
            method: 'GET',
            url: 'https://backend-us-contracting-aa1-test.nah-devapps.am.boehringer.com/api/queue/get-program-output?id=' + processId,
            headers: {
              "X-USER-IDENTITY": "crisdumar.de_la_rosa.ext@boehringer-ingelheim.com",
              "Content-Type": "application/json"
            }
             
          }).then( (content) => {

               let output = content.body.output//=['annualResults']['0']

               for(var key in output){
                 cy.log('Current Key: ' + key + '. Current value: ', output[key])
               }


          })

    } )

.its('status').should('be.equal', 200)
LoginPage.Pause(10000)
//============================================================================

    //AS.ValidateSSOCredentials()
    API.NTTConfigValidation()

  })

  it(AA1.TC5_STEP2_DESC, function() {

     API.NTTEvaluateValidation()

  })

  it(AA1.TC5_STEP3_DESC, function() {

      API.NTTProductsValidation()

   })

})

describe(AA1.TC6_DESC, function() {

  it(AA1.TC6_STEP1_DESC, function() {

      API.NTTOptimizationObjValidation()

  })
})

describe(AA1.TC7_DESC, function() {

  it(AA1.TC7_STEP1_DESC, function() {

      API.NTTOptimizeValidation()

  })
})

describe(AA1.TC8_DESC, function() {

  it(AA1.TC8_STEP1_DESC, function() {

      API.UserValidation()

  })
})

describe(AA1.TC9_DESC, function() {

  it(AA1.TC9_STEP1_DESC, function() {

      API.GETTestValidation()

  })

  it(AA1.TC9_STEP2_DESC, function() {

      API.POSTTestValidation()

  })
})

describe('TC 10 - ntt-program/states API', function() {

  it('Step 1 - Verify that sending a GET request to the ntt-program/states endpoint returns an Ok response and a JSON file within a key named states', function() {

      API.StateProgramValidation()

  })

})

describe('TC 11 - CP Program API Test', function() {

  it('Step 1 - Verify that sending a GET request to the cp-program/config endpoint returns an Ok response and a JSON file within a key named config', function() {

       API.CPPConfigValidation()

  })

  it('Step 2 - Verify that sending a POST request to the cp-program/generate-report endpoint returns an Ok response', function() {

       API.CPPGenerateReportValidation()

  })

  it('Step 3 - Verify that sending a GET request to the cp-program/products endpoint returns an Ok response and a JSON file including a key named products', function() {

       API.CPPProductsValidation()

  })

  it('Step 4 - Verify that sending a POST request to the cp-program/run-program endpoint returns an Ok response', function() {

       API.CPPRunProgramValidation()

  })

  it('Step 5 - Verify that sending a GET request to the /cp-program/valid-cohort-patient-headers endpoint returns an Ok response and a JSON file including a key named headers', function() {

       API.CPPCohPatHeaderValidation()

  })

})

describe('TC 12 - Monthly Projections API Test', function() {

  it('Step 1 - Verify that sending a POST request to the mp-program/evaluate API returns an Ok response', function() {

      API.MPEvaluateValidation()
  })

  it('Step 2 - Verify that sending a POST request to the mp-program/generate-report API returns an Ok response', function() {

      API.MPGenerateReportValidation()
  })

})

describe(AA1.TC13_DESC, function() {

  it(AA1.TC13_STEP1_DESC, function() {

      API.NTTPersistenceCopaysValidation()

  })

})

describe(AA1.TC14_DESC, function() {

  it(AA1.TC14_STEP1_DESC, function() {


      API.NTTPersRatePlotValidation()

  })

})

describe(AA1.TC15_DESC, function() {

  it(AA1.TC15_STEP1_DESC, function() {


      API.NTTPlotValidation(AA1.api_ntt_program_copay_card_plot_url)

  })

} )

describe(AA1.TC16_DESC, function() {

  it(AA1.TC16_STEP1_DESC, function() {


      API.NTTPlotValidation(AA1.api_ntt_program_abandonment_rate_plot_url)

  })

})

describe(AA1.TC17_DESC, function() {

  it(AA1.TC17_STEP1_DESC, function() {


      API.NTTPlotValidation(AA1.api_ntt_program_adherence_plot_url)

  })

})

describe(AA1.TC18_DESC, function() {

  it(AA1.TC18_STEP1_DESC, function() {


      API.NTTOptimizationPlotValidation()

  })

})

describe('TC 19 Validate Navigation to Access Solutions using Puppeteer Plugin', function() {

  it('Step 1 Execute External Plugin - retrieve data from Access Solutions', function() {

    AS.ValidateSSOCredentials()

  })
})

describe('TC 20 User Logged In', function() {

  it('Step 1 Validate the user has received a Welcome Msg response from Access Solutions', function() {

    AS.WelcomeMsgValidation()

  })

})

describe('TC 21 Ntt Program Charts', function() {

  it('Step 1 Validate Abandonment Rate Chart', function() {

    AS.AbandonmentRateChartValidation(0)

  })

  it('Step 2 Validate Copay Card Usage Chart', function() {

    AS.CopayCardUsageChartValidation(0)

  })

  it('Step 3 Validate AdherenceDoT Chart', function() {

    AS.AdherenceDoTChartValidation(0)

  })

  it('Step 4 Validate Persistence Rate Chart', function() {

    AS.PersRateChartValidation(0)

  })

  it('Step 5 Validate Scatter Plot Combined Chart', function() {

    AS.ScatterPlotChartCombinedValidation()

  })

  it('Step 5a Validate Scatter Plot Combined Gross Profit Chart', function() {

    AS.ScatterPlotChartCombinedValidation2()

  })


  it('Step 6 Validate Scatter Plot EVouchers Only Chart', function() {

    AS.ScatterPlotChartEVouchersOnlyValidation()

  })

  it('Step 6a Validate Scatter Plot EVouchers Only Gross Profit Chart', function() {

    AS.ScatterPlotChartEVouchersOnlyValidation2()

  })
})

describe('TC 22 Product and DOS Selection', function() {

  it('Step 1 Validate Product Selection', function() {

    AS.ProductValidation()

  })

  it('Step 2 Validate DOS Selection', function() {

    AS.DOSValidation()

  })
})

/*describe('TC 23 Optimization Objectives and Extent', function() {

  it('Step 1 Validate Selected Optimization', function() {

    AS.OptimizationValidation()

  })

  it('Step 2 Validate Selected Extent', function() {

    AS.ExtentValidation()

  })

})*/

describe('TC 24 Ntt Program Evaluation Results - Monthly', function() {

  it('Step 1 Monthly Incremental ROI  - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYINCREMENTALROI)

  })

  it('Step 2 Monthly Incremental Revenue - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYINCREMENTALREV)

  })

  it('Step 3 Monthly Incemental Costs - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYINCREMENTALCOSTS)

  })

  it('Step 4 Monthly Marginal ROI - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYMARGINALROI)

  })

  it('Step 5 Monthly Marginal Revenue - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYMARGINALREV)

  })

  it('Step 6 Monthly Marginal Costs - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYMARGINALCOSTS)

  })

  it('Step 7 Monthly Total RX Presented - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYTOTALRXPRES)

  })

  it('Step 8 Monthly Total Paid RX - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYTOTALPAIDRX)

  })

  it('Step 9 Monthly Total Paid Rx Voucher - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYTOTALPAIDRXVOUCHER)

  })

  it('Step 10 Monthly Total Paid RX Copay - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYTOTALPAIDRXCOPAY)

  })

  it('Step 11 Monthly Total Paid RX Double Dip - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYTOTALPAIDRXDBLDIP)

  })

  it('Step 12 Monthly Total Paid RX No Discount - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYTOTALPAIDRXNODISC)

  })

  it('Step 13 Monthly Pre Program Abandonment Rate - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYPREPROGRAMABANDRATE)

  })

  it('Step 14 Monthly Post Program Abandonment Rate - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYPOSTPROGRAMABANDRATE)

  })

  it('Step 15 Monthly Pre Program Adherence Rate - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYPREPROGRAMADHERENCE)

  })

  it('Step 16 Monthly Post Program Adherence Rate - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYPOSTPROGRAMADHERENCE)

  })

  it('Step 17 Monthly Pre Program Copay - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYPREPROGRAMCOPAY)

  })

  it('Step 18 Monthly Post Program Copay - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYPOSTPROGRAMCOPAY)

  })

  it('Step 19 Monthly Percentage Claims Qualifying - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYPCTGCLAIMSQLF)

  })

  it('Step 20 Monthly Incremental New Starts - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYINCRNEWSTARTS)

  })

  it('Step 21 Monthly Average Buy Down Per Rx - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYAVGBUYDOWNPERRX)

  })

  it('Step 22 Monthly Average Voucher Buydown Per Rx - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYAVGVOUCHERBUYDOWNPERRX)

  })

  it('Step 23 Monthly Average Copay Card Buydown Per Rx - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYAVGCCBUYDOWNPERRX)

  })

  it('Step 24 Monthly Gross to Net - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYGROSSTONET)

  })

  it('Step 25 Monthly Incremental Rx - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYINCRRXS)

  })

  it('Step 26 Monthly Check: Total Revenue Persistency - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYCHECKTOTALREVPERS)

  })

  it('Step 27 Monthly Check: Total Revenue Persistency % - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYCHECKTOTALREVPERSPCT)

  })

  it('Step 28 Monthly Check: Incremental Revenue Persistency - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYCHECKINCRREVPERS)

  })

  it('Step 29 Monthly Check: Incremental Revenue Persistency % - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYCHECKINCRREVPERSPCT)

  })

  it('Step 30 Monthly Check: Incremental ROI(Months 1-12) - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYCHECKINCRROI112)

  })

  it('Step 31 Monthly Check: Incremental ROI(Months 13-24) - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTHLYCHECKINCRROI1324)

  })

})

describe('TC 25 Ntt Program Evaluation Results - Month 1-12', function() {

  it('Step 1 - Total Incremental ROI  - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH1to12INCREMENTALROI)

  })

  it('Step 2 - Total Incremental Revenue - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH1to12INCREMENTALREV)

  })

  it('Step 3 - Total Incemental Costs - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH1to12INCREMENTALCOSTS)

  })

  it('Step 4 - Total Marginal ROI - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH1to12MARGINALROI)

  })

  it('Step 5- Total Marginal Revenue - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH1to12MARGINALREV)

  })

  it('Step 6 - Total Marginal Costs - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH1to12MARGINALCOSTS)

  })

  it('Step 7 - Total New Patient Started - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH1to12TOTALNEWPATIENT)

  })

  it('Step 8 - Total Projected Rx - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH1to12TOTALPRJCTEDRX)

  })

  it('Step 9 - Total Incremental Rx - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH1to12TOTALINCREMENTALRX)

  })

  it('Step 10 - Projected Filled Scripts With Voucher - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH1to12PROJCTEDFSWV)

  })

  it('Step 11 - Projected Filled Scripts w/ Copay Card - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH1to12PROJECTEDFSWCC)

  })

  it('Step 12 - Projected Filled Scripts with Double Dip - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH1to12PROJECTEDFSWDBLDIP)

  })


  it('Step 13 - Projected Filled Scripts w/ Discount - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH1to12PROJECTEDFSWDISC)

  })

  it('Step 14 - Relay Admin Cost - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH1to12RELAYADMINCOST)

  })

  it('Step 15 - Relay BuyDown Cost - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH1to12RELAYBUYDOWNCOST)

  })

  it('Step 16 - Relay Total Cost - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH1to12RELAYTOTALCOST)

  })

  it('Step 17 - McKesson Admin Cost - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH1to12MCKSONADMCOST)

  })

  it('Step 18 McKesson Buydown Cost - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH1to12MCKSONBUYDOWNCOST)

  })

  it('Step 19 McKesson Total Cost - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH1to12MCKSONTOTALCOST)

  })

  it('Step 20 - Total Revenue - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH1to12TOTALREV)

  })

  it('Step 21 - Gross Profit - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH1to12GROSSPROFIT)

  })

  it('Step 22 - Gross Incremental Profit - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH1to12GROSSINCREMENTALPROFIT)

  })

})

describe('TC 26 Ntt Program Evaluation Results - Month 13-24', function() {

  it('Step 1 - Total Incremental ROI  - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH13to24INCREMENTALROI)

  })

  it('Step 2 - Total Incremental Revenue - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH13to24INCREMENTALREV)

  })

  it('Step 3 - Total Incemental Costs - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH13to24INCREMENTALCOSTS)

  })

  it('Step 4 - Total Marginal ROI - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH13to24MARGINALROI)

  })

  it('Step 5- Total Marginal Revenue - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH13to24MARGINALREV)

  })

  it('Step 6 - Total Marginal Costs - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH13to24MARGINALCOSTS)

  })

  it('Step 7 - Total New Patient Started - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH13to24TOTALNEWPATIENT)

  })

  it('Step 8 - Total Projected Rx - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH13to24TOTALPRJCTEDRX)

  })

  it('Step 9 - Total Incremental Rx - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH13to24TOTALINCREMENTALRX)

  })

  it('Step 10 - Projected Filled Scripts With Voucher - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH13to24PROJCTEDFSWV)

  })

  it('Step 11 - Projected Filled Scripts w/ Copay Card - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH13to24PROJECTEDFSWCC)

  })

  it('Step 12 - Projected Filled Scripts with Double Dip - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH13to24PROJECTEDFSWDBLDIP)

  })


  it('Step 13 - Projected Filled Scripts w/ Discount - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH13to24PROJECTEDFSWDISC)

  })

  it('Step 14 - Relay Admin Cost - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH13to24RELAYADMINCOST)

  })

  it('Step 15 - Relay BuyDown Cost - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH13to24RELAYBUYDOWNCOST)

  })

  it('Step 16 - Relay Total Cost - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH13to24RELAYTOTALCOST)

  })

  it('Step 17 - McKesson Admin Cost - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH13to24MCKSONADMCOST)

  })

  it('Step 18 McKesson Buydown Cost - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH13to24MCKSONBUYDOWNCOST)

  })

  it('Step 19 McKesson Total Cost - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH13to24MCKSONTOTALCOST)

  })

  it('Step 20 - Total Revenue - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH13to24TOTALREV)

  })

  it('Step 21 - Gross Profit - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH13to24GROSSPROFIT)

  })

  it('Step 22 - Gross Incremental Profit - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.MONTH13to24GROSSINCREMENTALPROFIT)

  })

})

describe('TC 27 Ntt Program Evaluation Export/Import', function() {

  it('Step 1 - Export data to Excel and verify the content in the Scenarios results excel sheet', function() {

    AS.ValidateExportImport(1)

  })

  it('Step 2 - Import data from a csv doc - The data must be inserted in the dashboard scenarios table', function() {

    AS.ValidateExportImport(2)

  })
})

describe('TC 28 Ntt Program - Optimized Program Parameters and Results Summary [USD]', function() {

  it('Step 1 - ROI Combined', function() {

    AS.ValidateParematerResults(Plugin.ROI_Combined)
  })

  it('Step 2 - ROI eVouchers Only', function() {

    AS.ValidateParematerResults(Plugin.ROI_eVouchers_Only)
  })

  it('Step 3 - Gross to Net Combined', function() {

    AS.ValidateParematerResults(Plugin.G2N_Combined)
  })

  it('Step 4 - Gross to Net eVouchers Only', function() {

    AS.ValidateParematerResults(Plugin.G2N_eVouchers_Only)
  })

  it('Step 5 - Total # Incremental Rx Combined ', function() {

    AS.ValidateParematerResults(Plugin.NRX_Combined)
  })

  it('Step 6 - Total # Incremental Rx eVouchers Only', function() {

    AS.ValidateParematerResults(Plugin.NRX_eVouchers_Only)
  })

})

describe('TC 29 Ntt Program - Optimized Program Monthly Program Results', function() {

  it('Step 1 - ROI Combined - Incr-Marginal(ROI-Rev-Costs), Total(Rx, Paid-eV-CC-DD-ND), Pre-Post(AbnRate-Adher-Copay), Avrg(Buy Down-Voucher-CC), G2N, Incr RXs', function() {

    AS.ValidateParematerResults(Plugin.Monthly_ROI_Combined)
  })

  it('Step 2 - ROI eVouchers Only - Incr-Marginal(ROI-Rev-Costs), Total(Rx, Paid-eV-CC-DD-ND), Pre-Post(AbnRate-Adher-Copay), Avrg(Buy Down-Voucher-CC), G2N, Incr RXs', function() {

    AS.ValidateParematerResults(Plugin.Monthly_ROI_eVouchers_Only)
  })

  it('Step 3 - Gross to Net Combined - Incr-Marginal(ROI-Rev-Costs), Total(Rx, Paid-eV-CC-DD-ND), Pre-Post(AbnRate-Adher-Copay), Avrg(Buy Down-Voucher-CC), G2N, Incr RXs', function() {

    AS.ValidateParematerResults(Plugin.Monthly_G2N_Combined)
  })

  it('Step 4 - Gross to Net eVouchers Only - Incr-Marginal(ROI-Rev-Costs), Total(Rx, Paid-eV-CC-DD-ND), Pre-Post(AbnRate-Adher-Copay), Avrg(Buy Down-Voucher-CC), G2N, Incr RXs', function() {

    AS.ValidateParematerResults(Plugin.Monthly_G2N_eVouchers_Only)
  })

  it('Step 5 - Total # Incremental Rx Combined - Incr-Marginal(ROI-Rev-Costs), Total(Rx, Paid-eV-CC-DD-ND), Pre-Post(AbnRate-Adher-Copay), Avrg(Buy Down-Voucher-CC), G2N, Incr RXs', function() {

    AS.ValidateParematerResults(Plugin.Monthly_NRX_Combined)
  })

  it('Step 6 - Total # Incremental Rx eVouchers Only - Incr-Marginal(ROI-Rev-Costs), Total(Rx, Paid-eV-CC-DD-ND), Pre-Post(AbnRate-Adher-Copay), Avrg(Buy Down-Voucher-CC), G2N, Incr RXs', function() {

    AS.ValidateParematerResults(Plugin.Monthly_NRX_eVouchers_Only)
  })

})

describe('TC 30 Ntt Program - Optimized Program Month 1-12 Program Results', function() {

  it('Step 1 - ROI Combined - Incr-Marginal(ROI-Rev-Costs), Total(Marginal Costs-NewPatient-Rx), Projected Fill Scripts(eV, CC, DD, ND), Relay Cost-McKesson(Adm, Buydown, Total), Total Rev, Gross Profit, Gross Incrmental Profit', function() {

    AS.ValidateParematerResults(Plugin.Month112_ROI_Combined)
  })

  it('Step 2 - ROI eVouchers Only - Incr-Marginal(ROI-Rev-Costs), Total(Rx, Paid-eV-CC-DD-ND), Pre-Post(AbnRate-Adher-Copay), Avrg(Buy Down-Voucher-CC), G2N, Incr RXs', function() {

    AS.ValidateParematerResults(Plugin.Month112_ROI_eVouchers_Only)
  })

  it('Step 3 - Gross to Net Combined - Incr-Marginal(ROI-Rev-Costs), Total(Rx, Paid-eV-CC-DD-ND), Pre-Post(AbnRate-Adher-Copay), Avrg(Buy Down-Voucher-CC), G2N, Incr RXs', function() {

    AS.ValidateParematerResults(Plugin.Month112_G2N_Combined)
  })

  it('Step 4 - Gross to Net eVouchers Only - Incr-Marginal(ROI-Rev-Costs), Total(Rx, Paid-eV-CC-DD-ND), Pre-Post(AbnRate-Adher-Copay), Avrg(Buy Down-Voucher-CC), G2N, Incr RXs', function() {

    AS.ValidateParematerResults(Plugin.Month112_G2N_eVouchers_Only)
  })

  it('Step 5 - Total # Incremental Rx Combined - Incr-Marginal(ROI-Rev-Costs), Total(Rx, Paid-eV-CC-DD-ND), Pre-Post(AbnRate-Adher-Copay), Avrg(Buy Down-Voucher-CC), G2N, Incr RXs', function() {

    AS.ValidateParematerResults(Plugin.Month112_NRX_Combined)
  })

  it('Step 6 - Total # Incremental Rx eVouchers Only - Incr-Marginal(ROI-Rev-Costs), Total(Rx, Paid-eV-CC-DD-ND), Pre-Post(AbnRate-Adher-Copay), Avrg(Buy Down-Voucher-CC), G2N, Incr RXs', function() {

    AS.ValidateParematerResults(Plugin.Month112_NRX_eVouchers_Only)
  })

})

describe('TC 31 Ntt Program - Optimized Program Month 13-24 Program Results', function() {

  it('Step 1 - ROI Combined - Incr-Marginal(ROI-Rev-Costs), Total(Marginal Costs-NewPatient-Rx), Projected Fill Scripts(eV, CC, DD, ND), Relay Cost-McKesson(Adm, Buydown, Total), Total Rev, Gross Profit, Gross Incrmental Profit', function() {

    AS.ValidateParematerResults(Plugin.Month1324_ROI_Combined)
  })

  it('Step 2 - ROI eVouchers Only - Incr-Marginal(ROI-Rev-Costs), Total(Rx, Paid-eV-CC-DD-ND), Pre-Post(AbnRate-Adher-Copay), Avrg(Buy Down-Voucher-CC), G2N, Incr RXs', function() {

    AS.ValidateParematerResults(Plugin.Month1324_ROI_eVouchers_Only)
  })

  it('Step 3 - Gross to Net Combined - Incr-Marginal(ROI-Rev-Costs), Total(Rx, Paid-eV-CC-DD-ND), Pre-Post(AbnRate-Adher-Copay), Avrg(Buy Down-Voucher-CC), G2N, Incr RXs', function() {

    AS.ValidateParematerResults(Plugin.Month1324_G2N_Combined)
  })

  it('Step 4 - Gross to Net eVouchers Only - Incr-Marginal(ROI-Rev-Costs), Total(Rx, Paid-eV-CC-DD-ND), Pre-Post(AbnRate-Adher-Copay), Avrg(Buy Down-Voucher-CC), G2N, Incr RXs', function() {

    AS.ValidateParematerResults(Plugin.Month1324_G2N_eVouchers_Only)
  })

  it('Step 5 - Total # Incremental Rx Combined - Incr-Marginal(ROI-Rev-Costs), Total(Rx, Paid-eV-CC-DD-ND), Pre-Post(AbnRate-Adher-Copay), Avrg(Buy Down-Voucher-CC), G2N, Incr RXs', function() {

    AS.ValidateParematerResults(Plugin.Month1324_NRX_Combined)
  })

  it('Step 6 - Total # Incremental Rx eVouchers Only - Incr-Marginal(ROI-Rev-Costs), Total(Rx, Paid-eV-CC-DD-ND), Pre-Post(AbnRate-Adher-Copay), Avrg(Buy Down-Voucher-CC), G2N, Incr RXs', function() {

    AS.ValidateParematerResults(Plugin.Month1324_NRX_eVouchers_Only)
  })

})

describe('TC 32 - NetPrice Alerts when the inserted value is equal or lower than 0', function() {

  it('Step 1. Verify when a 0 is inserted in one of the NetPrice cells in the scenarios table, the color of the cell border turns red', function() {

    AS.NetPriceZeroValueValidation(0)

  })

  it('Step 2. Verify when a Neg value is inserted in one of the NetPrice cells in the scenarios table, the color of the cell border turns red', function() {

    AS.NetPriceNegValueValidation(0)

  })

})

describe('TC 33 - Check Metrics Warning Alert if at least one of the percentage value is in the -5% to 5% range', function() {

  it('Step 1. Verify that a warning Message is displayed when AT LEAST one of the Check Metrics Percentage value in the Program Results table is OUTSIDE OF the -5% to 5% range', function() {

    AS.CheckMetricsValueInRange(false, 0)

  })

  it('Step 2. Verify that a warning Message is NOT displayed when NONE of the Check Metrics Percentage values in the Program Results table is outside of the -5% to 5% range', function() {

    AS.CheckMetricsValueInRange(true, 0)

  })

})

describe('TC 34 - State Program - Product Selection', function() {

  it('Step 1. Verify that the State of TX has been selected from the State Drop Down menu', function() {

    AS.SBSProductValidation(0)

  })

  it('Step 2. Verify that a Product has been selected from the Product Drop Down menu', function() {

    AS.SBSProductValidation(1)

  })

  it('Step 3. Verify that a DOS has been selected from the DOS Drop Down menu', function() {

    AS.SBSProductValidation(2)

  })

})

describe('TC 35 Ntt Program State-by-State Model Input Data Charts', function() {

  it('Step 1 Validate Abandonment Rate Chart', function() {

    AS.AbandonmentRateChartValidation(1)

  })

  it('Step 2 Validate Copay Card Usage Chart', function() {

    AS.CopayCardUsageChartValidation(1)

  })

  it('Step 3 Validate AdherenceDoT Chart', function() {

    AS.AdherenceDoTChartValidation(1)

  })

  it('Step 4 Validate Persistence Rate Chart', function() {

    AS.PersRateChartValidation(1)

  })

})

describe('TC 36 State Program Evaluation Results - Monthly', function() {

  it('Step 1 Monthly Incremental ROI  - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYINCREMENTALROI)

  })

  it('Step 2 Monthly Incremental Revenue - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYINCREMENTALREV)

  })

  it('Step 3 Monthly Incemental Costs - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYINCREMENTALCOSTS)

  })

  it('Step 4 Monthly Marginal ROI - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYMARGINALROI)

  })

  it('Step 5 Monthly Marginal Revenue - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYMARGINALREV)

  })

  it('Step 6 Monthly Marginal Costs - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYMARGINALCOSTS)

  })

  it('Step 7 Monthly Total RX Presented - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYTOTALRXPRES)

  })

  it('Step 8 Monthly Total Paid RX - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYTOTALPAIDRX)

  })

  it('Step 9 Monthly Total Paid Rx Voucher - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYTOTALPAIDRXVOUCHER)

  })

  it('Step 10 Monthly Total Paid RX Copay - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYTOTALPAIDRXCOPAY)

  })

  it('Step 11 Monthly Total Paid RX Double Dip - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYTOTALPAIDRXDBLDIP)

  })

  it('Step 12 Monthly Total Paid RX No Discount - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYTOTALPAIDRXNODISC)

  })

  it('Step 13 Monthly Pre Program Abandonment Rate - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYPREPROGRAMABANDRATE)

  })

  it('Step 14 Monthly Post Program Abandonment Rate - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYPOSTPROGRAMABANDRATE)

  })

  it('Step 15 Monthly Pre Program Adherence Rate - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYPREPROGRAMADHERENCE)

  })

  it('Step 16 Monthly Post Program Adherence Rate - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYPOSTPROGRAMADHERENCE)

  })

  it('Step 17 Monthly Pre Program Copay - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYPREPROGRAMCOPAY)

  })

  it('Step 18 Monthly Post Program Copay - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYPOSTPROGRAMCOPAY)

  })

  it('Step 19 Monthly Percentage Claims Qualifying - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYPCTGCLAIMSQLF)

  })

  it('Step 20 Monthly Incremental New Starts - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYINCRNEWSTARTS)

  })

  it('Step 21 Monthly Average Buy Down Per Rx - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYAVGBUYDOWNPERRX)

  })

  it('Step 22 Monthly Average Voucher Buydown Per Rx - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYAVGVOUCHERBUYDOWNPERRX)

  })

  it('Step 23 Monthly Average Copay Card Buydown Per Rx - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYAVGCCBUYDOWNPERRX)

  })

  it('Step 24 Monthly Gross to Net - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYGROSSTONET)

  })

  it('Step 25 Monthly Incremental Rx - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYINCRRXS)

  })

  it('Step 26 Monthly Check: Total Revenue Persistency - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYCHECKTOTALREVPERS)

  })

  it('Step 27 Monthly Check: Total Revenue Persistency % - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYCHECKTOTALREVPERSPCT)

  })

  it('Step 28 Monthly Check: Incremental Revenue Persistency - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYCHECKINCRREVPERS)

  })

  it('Step 29 Monthly Check: Incremental Revenue Persistency % - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYCHECKINCRREVPERSPCT)

  })

  it('Step 30 Monthly Check: Incremental ROI(Months 1-12) - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYCHECKINCRROI112)

  })

  it('Step 31 Monthly Check: Incremental ROI(Months 13-24) - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTHLYCHECKINCRROI1324)

  })

})

describe('TC 37 State Program Evaluation Results - Month 1-12', function() {

  it('Step 1 - Total Incremental ROI  - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH1to12INCREMENTALROI)

  })

  it('Step 2 - Total Incremental Revenue - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH1to12INCREMENTALREV)

  })

  it('Step 3 - Total Incemental Costs - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH1to12INCREMENTALCOSTS)

  })

  it('Step 4 - Total Marginal ROI - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH1to12MARGINALROI)

  })

  it('Step 5- Total Marginal Revenue - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH1to12MARGINALREV)

  })

  it('Step 6 - Total Marginal Costs - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH1to12MARGINALCOSTS)

  })

  it('Step 7 - Total New Patient Started - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH1to12TOTALNEWPATIENT)

  })

  it('Step 8 - Total Projected Rx - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH1to12TOTALPRJCTEDRX)

  })

  it('Step 9 - Total Incremental Rx - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH1to12TOTALINCREMENTALRX)

  })

  it('Step 10 - Projected Filled Scripts With Voucher - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH1to12PROJCTEDFSWV)

  })

  it('Step 11 - Projected Filled Scripts w/ Copay Card - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH1to12PROJECTEDFSWCC)

  })

  it('Step 12 - Projected Filled Scripts with Double Dip - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH1to12PROJECTEDFSWDBLDIP)

  })


  it('Step 13 - Projected Filled Scripts w/ Discount - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH1to12PROJECTEDFSWDISC)

  })

  it('Step 14 - Relay Admin Cost - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH1to12RELAYADMINCOST)

  })

  it('Step 15 - Relay BuyDown Cost - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH1to12RELAYBUYDOWNCOST)

  })

  it('Step 16 - Relay Total Cost - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH1to12RELAYTOTALCOST)

  })

  it('Step 17 - McKesson Admin Cost - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH1to12MCKSONADMCOST)

  })

  it('Step 18 McKesson Buydown Cost - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH1to12MCKSONBUYDOWNCOST)

  })

  it('Step 19 McKesson Total Cost - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH1to12MCKSONTOTALCOST)

  })

  it('Step 20 - Total Revenue - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH1to12TOTALREV)

  })

  it('Step 21 - Gross Profit - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH1to12GROSSPROFIT)

  })

  it('Step 22 - Gross Incremental Profit - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH1to12GROSSINCREMENTALPROFIT)

  })

})

describe('TC 38 State Program Evaluation Results - Month 13-24', function() {

  it('Step 1 - Total Incremental ROI  - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH13to24INCREMENTALROI)

  })

  it('Step 2 - Total Incremental Revenue - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH13to24INCREMENTALREV)

  })

  it('Step 3 - Total Incemental Costs - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH13to24INCREMENTALCOSTS)

  })

  it('Step 4 - Total Marginal ROI - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH13to24MARGINALROI)

  })

  it('Step 5- Total Marginal Revenue - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH13to24MARGINALREV)

  })

  it('Step 6 - Total Marginal Costs - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH13to24MARGINALCOSTS)

  })

  it('Step 7 - Total New Patient Started - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH13to24TOTALNEWPATIENT)

  })

  it('Step 8 - Total Projected Rx - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH13to24TOTALPRJCTEDRX)

  })

  it('Step 9 - Total Incremental Rx - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH13to24TOTALINCREMENTALRX)

  })

  it('Step 10 - Projected Filled Scripts With Voucher - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH13to24PROJCTEDFSWV)

  })

  it('Step 11 - Projected Filled Scripts w/ Copay Card - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH13to24PROJECTEDFSWCC)

  })

  it('Step 12 - Projected Filled Scripts with Double Dip - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH13to24PROJECTEDFSWDBLDIP)

  })


  it('Step 13 - Projected Filled Scripts w/ Discount - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH13to24PROJECTEDFSWDISC)

  })

  it('Step 14 - Relay Admin Cost - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH13to24RELAYADMINCOST)

  })

  it('Step 15 - Relay BuyDown Cost - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH13to24RELAYBUYDOWNCOST)

  })

  it('Step 16 - Relay Total Cost - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH13to24RELAYTOTALCOST)

  })

  it('Step 17 - McKesson Admin Cost - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH13to24MCKSONADMCOST)

  })

  it('Step 18 McKesson Buydown Cost - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH13to24MCKSONBUYDOWNCOST)

  })

  it('Step 19 McKesson Total Cost - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH13to24MCKSONTOTALCOST)

  })

  it('Step 20 - Total Revenue - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH13to24TOTALREV)

  })

  it('Step 21 - Gross Profit - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH13to24GROSSPROFIT)

  })

  it('Step 22 - Gross Incremental Profit - Scenarios 1 to 6', function() {

    AS.ValidateProgramEvaluationResults(Plugin.SBSMONTH13to24GROSSINCREMENTALPROFIT)

  })

})

describe('TC 39 State Program Evaluation Export/Import', function() {

  it('Step 1 - Export data to Excel and verify the content in the Scenarios results excel sheet', function() {

    AS.ValidateExportImport(3)

  })

  it('Step 2 - Import data from a csv doc - The data must be inserted in the dashboard scenarios table', function() {

    AS.ValidateExportImport(4)

  })
})

describe('TC 40 - State Program - NetPrice Alerts when the inserted value is equal or lower than 0', function() {

  it('Step 1. Verify when a 0 is inserted in one of the NetPrice cells in the scenarios table, the color of the cell border turns red', function() {

    AS.NetPriceZeroValueValidation(1)

  })

  it('Step 2. Verify when a Neg value is inserted in one of the NetPrice cells in the scenarios table, the color of the cell border turns red', function() {

    AS.NetPriceNegValueValidation(1)

  })

})

describe('TC 41 - State Program - Check Metrics Warning Alert if at least one of the percentage value is in the -5% to 5% range', function() {

  it('Step 1. Verify that a warning Message is displayed when AT LEAST one of the Check Metrics Percentage value in the Program Results table is OUTSIDE OF the -5% to 5% range', function() {

    AS.CheckMetricsValueInRange(false, 1)

  })

  it('Step 2. Verify that a warning Message is NOT displayed when NONE of the Check Metrics Percentage values in the Program Results table is outside of the -5% to 5% range', function() {

    AS.CheckMetricsValueInRange(true, 1)

  })

})

describe('TC 42 - CP Program - Program Evaluation - Product Selection', function() {

  it('Step 1. Verify that a Product has been selected from the Product Drop Down menu', function() {

    AS.CPPProductValidation(0)

  })

  it('Step 2. Verify that a DOS has been selected from the DOS Drop Down menu', function() {

    AS.CPPProductValidation(1)

  })
  
  it('Step 3. Verify that a Program Term Start Date has been selected in the CP Program Product Selection Section', function() {

    AS.CPPProductValidation(2)

  })

  it('Step 4. Verify that a Program Term End Date has been selected in the CP Program Product Selection Section', function() {

    AS.CPPProductValidation(3)

  })

  it('Step 5. Verify that an Earliest Cohort Month date has been selected in the CP Program Product Selection Section', function() {

    AS.CPPProductValidation(4)

  })

  it('Step 6. Verify that a Relay Data Month date has been selected in the CP Program Product Selection Section', function() {

    AS.CPPProductValidation(5)

  })

  it('Step 7. Verify that a Custom Cohort Patients Data csv file has been imported in the CP Program Product Selection Section', function() {

    AS.CPPProductValidation(6)

  })

})

describe('TC 43 - CP Program - NetPrice Alerts when the inserted value is equal or lower than 0', function() {

  it('Step 1. Verify that when a 0 is inserted in one of the NetPrice cells in the scenarios table, the color of the cell border turns red', function() {

    AS.NetPriceZeroValueValidation(2)

  })

  it('Step 2. Verify that when a Neg value is inserted in one of the NetPrice cells in the scenarios table, the color of the cell border turns red', function() {

    AS.NetPriceNegValueValidation(2)

  })

})

describe('TC 44 - CP Program Evaluation Export/Import', function() {

  it('Step 1 - Export data to Excel and verify the content in the Scenarios results excel sheet', function() {

    AS.ValidateExportImport(6)

  })

  it('Step 2 - Import data from a csv doc - The data must be inserted in the dashboard scenarios table', function() {

    AS.ValidateExportImport(7)

  })
})

describe('TC 45 - CP Program Evaluation - CP Program Execution Bell Notifications', function() {

  it('Step 1 - Click on the Bell icon located on the upper right corner of the Access Solutions page and verify that the last CP program execution didn´t fail, and also that a notification indicating that the results are ready, is included in the icon notifications list', function() {

    AS.CPPBellNotifications(0)

  })

  it('Step 2 - In the notifications list described in Step 1, verify that the last CP program execution time stamp difference from the current time is not greater than 24 hrs', function() {

    AS.CPPBellNotifications(1)

  })

})

describe('TC 46 - CP Program - Validate the data included in the Annual Table', function() {

  it('Step 1 Verify the CP Program CPP-ANNUAL-INCREMENTALCOST values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-INCREMENTALCOST')

  })

  it('Step 2 Verify the CP Program CPP-ANNUAL-INCREMENTALRETURNONINVESTMENT values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-INCREMENTALRETURNONINVESTMENT')

  })

  it('Step 3 Verify the CP Program CPP-ANNUAL-TOTALPROJECTEDRX values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-TOTALPROJECTEDRX')

  })

  it('Step 4 Verify the CP Program CPP-ANNUAL-INCREMENTALCOST values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-TOTALINCREMENTALRX')

  })

  it('Step 5 Verify the CP Program CPP-ANNUAL-PROJECTEDRXWITHEVOUCHER values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-PROJECTEDRXWITHEVOUCHER')

  })

  it('Step 6 Verify the CP Program CPP-ANNUAL-PROJECTEDRXWITHCOPAYCARD values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-PROJECTEDRXWITHCOPAYCARD')

  })

  it('Step 7 Verify the CP Program CPP-ANNUAL-PROJETEDRXWITHDOUBLEDIP values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-PROJETEDRXWITHDOUBLEDIP')

  })

  it('Step 8 Verify the CP Program CPP-ANNUAL-PROJECTEDRXWITHOUTDISCOUNT values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-PROJECTEDRXWITHOUTDISCOUNT')

  })

  it('Step 9 Verify the CP Program CPP-ANNUAL-RELAYADMINCOST values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-RELAYADMINCOST')

  })

  it('Step 10 Verify the CP Program CPP-ANNUAL-RELAYBUYDOWNCOST values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-RELAYBUYDOWNCOST')

  })

  it('Step 11 Verify the CP Program CPP-ANNUAL-RELAYTOTALCOST values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-RELAYTOTALCOST')

  })

  it('Step 12 Verify the CP Program CPP-ANNUAL-MCKESSONADMINCOST values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-MCKESSONADMINCOST')

  })

  it('Step 13 Verify the CP Program CPP-ANNUAL-MCKESSONBUYDOWNCOST values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-MCKESSONBUYDOWNCOST')

  })

  it('Step 14 Verify the CP Program CPP-ANNUAL-MCKESSONTOTALCOST values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-MCKESSONTOTALCOST')

  })

  it('Step 15 Verify the CP Program CPP-ANNUAL-PRIORPROGRAM#ASSISTEDPATIENTS values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-PRIORPROGRAM#ASSISTEDPATIENTS')

  })

  it('Step 16 Verify the CP Program CPP-ANNUAL-PRIORPROGRAM#EVOUCHERPATIENTS values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-PRIORPROGRAM#EVOUCHERPATIENTS')

  })

  it('Step 17 Verify the CP Program CPP-ANNUAL-#PATIENTSCOMINGBACK values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-#PATIENTSCOMINGBACK')

  })

  it('Step 18 Verify the CP Program CPP-ANNUAL-#PATIENTSNOTDROPPING values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-#PATIENTSNOTDROPPING')

  })

  it('Step 19 Verify the CP Program CPP-ANNUAL-ABANDONMENTRATE% values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-ABANDONMENTRATE%')

  })

  it('Step 20 Verify the CP Program CPP-ANNUAL-NEWPROGRAMAVGCOPAY values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-NEWPROGRAMAVGCOPAY')

  })

  it('Step 21 Verify the CP Program CPP-ANNUAL-NEWPROGRAMADHERENCEDAYS values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-NEWPROGRAMADHERENCEDAYS')

  })

  it('Step 22 Verify the CP Program CPP-ANNUAL-PRIORPROGRAMAVGCOPAY values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-PRIORPROGRAMAVGCOPAY')

  })

  it('Step 23 Verify the CP Program CPP-ANNUAL-PRIORPROGRAMADHERENCEDAYS values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-PRIORPROGRAMADHERENCEDAYS')

  })

  it('Step 24 Verify the CP Program CPP-ANNUAL-AVGEVBUYDOWNPERRX values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-AVGEVBUYDOWNPERRX')

  })

  it('Step 25 Verify the CP Program CPP-ANNUAL-AVGCCBUYDOWNPERRX values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-AVGCCBUYDOWNPERRX')

  })

  it('Step 26 Verify the CP Program CPP-ANNUAL-AVGBUYDOWNPERRX values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-AVGCCBUYDOWNPERRX')

  })

  it('Step 27 Verify the CP Program CPP-ANNUAL-TOTALREVENUE values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-TOTALREVENUE')

  })

  it('Step 28 Verify the CP Program CPP-ANNUAL-GROSSPROFIT values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-GROSSPROFIT')

  })

  it('Step 29 Verify the CP Program CPP-ANNUAL-GROSSINCREMENTALPROFIT values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-GROSSINCREMENTALPROFIT')

  })

  it('Step 30 Verify the CP Program CPP-ANNUAL-TOTALMARGINALREVENUE values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-TOTALMARGINALREVENUE')

  })

  it('Step 31 Verify the CP Program CPP-ANNUAL-TOTALMARGINALCOST values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-TOTALMARGINALCOST')

  })

  it('Step 32 Verify the CP Program CPP-ANNUAL-MARGINALRETURNONINVESTMENT values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('CPPANNUAL-MARGINALRETURNONINVESTMENT')

  })
  
})

describe('TC 47 - Monthly Projections - Validate the Product Selection and MP Config Import', function() {

  it('Step 1 Verify that a product can be selected with no issues from the Product drop down menu', function() {

    AS.MPProductSelectionValidation(0)

  })

  it('Step 2 Verify that a DOS can be selected with no issues from the DOS drop down menu', function() {

    AS.MPProductSelectionValidation(1)

  })

  it('Step 1 Verify that a csv file can be imported with no issues by clicking the Import Monhly Projections button', function() {

    AS.MPProductSelectionValidation(2)

  })
})

describe('TC 48 - Monthly Projections - Validate the data included in the NoRefills Table', function() {

  it('Step 1 Verify the Monthly Projections NOREFILLS-RELAYADMINCOST values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-RELAYADMINCOST')

  })

  it('Step 2 Verify the Monthly Projections NOREFILLS-RELAYBUYDOWNCOST values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-RELAYBUYDOWNCOST')

  })

  it('Step 3 Verify the Monthly Projections NOREFILLS-RELAYTOTALCOST values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-RELAYTOTALCOST')

  })

  it('Step 4 Verify the Monthly Projections NOREFILLS-MCKESSONADMINCOST values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-MCKESSONADMINCOST')

  })

  it('Step 5 Verify the Monthly Projections NOREFILLS-MCKESSONBUYDOWNCOST values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-MCKESSONBUYDOWNCOST')

  })

  it('Step 6 Verify the Monthly Projections NOREFILLS-MCKESSONBUYDOWNCOST values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-MCKESSONBUYDOWNCOST')

  })

  it('Step 7 Verify the Monthly Projections NOREFILLS-MCKESSONTOTALCOST values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-MCKESSONTOTALCOST')

  })

  it('Step 8 Verify the Monthly Projections NOREFILLS-TOTALREVENUE values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-TOTALREVENUE')

  })

  it('Step 9 Verify the Monthly Projections NOREFILLS-MCKESSONBUYDOWNCOST values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-MCKESSONBUYDOWNCOST')

  })

  it('Step 10 Verify the Monthly Projections NOREFILLS-RETURNONINVESTMENT values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-RETURNONINVESTMENT')

  })

  it('Step 11 Verify the Monthly Projections NOREFILLS-COSTS values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-COSTS')

  })

  it('Step 12 Verify the Monthly Projections NOREFILLS-%CLAIMSQUALIFYINGEV values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-%CLAIMSQUALIFYINGEV')

  })

  it('Step 13 Verify the Monthly Projections NOREFILLS-G2N values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-G2N')

  })

  it('Step 14 Verify the Monthly Projections NOREFILLS-AVERAGEBUYDOWNPERRX values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-AVERAGEBUYDOWNPERRX')

  })

  it('Step 15 Verify the Monthly Projections NOREFILLS-AVERAGECOPAYCARDBUYDOWNPERRX values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-AVERAGECOPAYCARDBUYDOWNPERRX')

  })

  it('Step 16 Verify the Monthly Projections NOREFILLS-AVERAGEVOUCHERBUYDOWNPERRX values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-AVERAGEVOUCHERBUYDOWNPERRX')

  })

  it('Step 17 Verify the Monthly Projections NOREFILLS-INCREMENTALREVENUE values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-INCREMENTALREVENUE')

  })

  it('Step 18 Verify the Monthly Projections NOREFILLS-MARGINALCOSTS values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-MARGINALCOSTS')

  })
  it('Step 19 Verify the Monthly Projections MPNOREFILLS-MARGINALROI values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-MARGINALROI')

  })

  it('Step 20 Verify the Monthly Projections MPNOREFILLS-MARGINALREVENUE values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-MARGINALREVENUE')

  })

  it('Step 21 Verify the Monthly Projections MPNOREFILLS-MONTHLYINCREMENTALNEWSTARTS values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-MONTHLYINCREMENTALNEWSTARTS')

  })

  it('Step 22 Verify the Monthly Projections NOREFILLS-%POST-PROGRAMABANDONMENTRATE values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-%POST-PROGRAMABANDONMENTRATE')

  })

  it('Step 23 Verify the Monthly Projections NOREFILLS-POST-PROGRAMADHERENCE values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-POST-PROGRAMADHERENCE')

  })

  it('Step 24 Verify the Monthly Projections NOREFILLS-POST-PROGRAMCOPAY values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-POST-PROGRAMCOPAY')

  })

  it('Step 25 Verify the Monthly Projections NOREFILLS-%PRE-PROGRAMABANDONMENTRATE values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-%PRE-PROGRAMABANDONMENTRATE')

  })

  it('Step 26 Verify the Monthly Projections NOREFILLS-PRE-PROGRAMADHERENCE values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-PRE-PROGRAMADHERENCE')

  })

  it('Step 27 Verify the Monthly Projections NOREFILLS-PRE-PROGRAMCOPAY values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-PRE-PROGRAMCOPAY')

  })

  it('Step 28 Verify the Monthly Projections NOREFILLS-TOTALPAIDRX values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-TOTALPAIDRX')

  })

  it('Step 29 Verify the Monthly Projections NOREFILLS-TOTALPAIDRXCOPAYCARD values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-TOTALPAIDRXCOPAYCARD')

  })

  it('Step 30 Verify the Monthly Projections NOREFILLS-TOTALPAIDRXDOUBLEDIP values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-TOTALPAIDRXDOUBLEDIP')

  })

  it('Step 31 Verify the Monthly Projections NOREFILLS-TOTALPAIDRXNODISCOUNT values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-TOTALPAIDRXNODISCOUNT')

  })

  it('Step 32 Verify the Monthly Projections NOREFILLS-TOTALPAIDRXEVOUCHER values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-TOTALPAIDRXEVOUCHER')

  })

  it('Step 33 Verify the Monthly Projections NOREFILLS-TOTALRXPRESENTED values match their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPNOREFILLS-TOTALRXPRESENTED')

  })

})

describe('TC 49 - Monthly Projections - Validate the data included in the "Refills Included" Table', function() {

  it('Step 1 Verify the Monthly Projections REFILLSINCL-TOTALINCREMENTALREVENUE values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPREFILLSINCL-TOTALINCREMENTALREVENUE')

  })

  it('Step 2 Verify the Monthly Projections REFILLSINCL-TOTALINCREMENTALCOSTS values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPREFILLSINCL-TOTALINCREMENTALCOSTS')

  })

  it('Step 3 Verify the Monthly Projections REFILLSINCL-TOTALMARGINALREVENUE values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPREFILLSINCL-TOTALMARGINALREVENUE')

  })

  it('Step 4 Verify the Monthly Projections REFILLSINCL-TOTALMARGINALCOSTS values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPREFILLSINCL-TOTALMARGINALCOSTS')

  })

  it('Step 5 Verify the Monthly Projections REFILLSINCL-TOTALNEWPATIENTSTARTED values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPREFILLSINCL-TOTALNEWPATIENTSTARTED')

  })

  it('Step 6 Verify the Monthly Projections REFILLSINCL-TOTALPROJECTEDRX values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPREFILLSINCL-TOTALPROJECTEDRX')

  })

  it('Step 7 Verify the Monthly Projections REFILLSINCL-TOTALINCREMENTALRX values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPREFILLSINCL-TOTALINCREMENTALRX')

  })

  it('Step 8 Verify the Monthly Projections REFILLSINCL-PROJECTEDFILLEDSCRIPTSEVOUCHER values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPREFILLSINCL-PROJECTEDFILLEDSCRIPTSEVOUCHER')

  })

  it('Step 9 Verify the Monthly Projections REFILLSINCL-TOTALPROJECTEDRX values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPREFILLSINCL-PROJECTEDFILLEDSCRIPTSCOPAYCARD')

  })

  it('Step 10 Verify the Monthly Projections REFILLSINCL-PROJECTEDFILLEDSCRIPTSDOUBLEDIP values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPREFILLSINCL-PROJECTEDFILLEDSCRIPTSDOUBLEDIP')

  })

  it('Step 11 Verify the Monthly Projections REFILLSINCL-PROJECTEDFILLEDSCRIPTSNODISCOUNT values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPREFILLSINCL-PROJECTEDFILLEDSCRIPTSNODISCOUNT')

  })

  it('Step 12 Verify the Monthly Projections REFILLSINCL-RELAYADMINCOST values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPREFILLSINCL-RELAYADMINCOST')

  })

  it('Step 13 Verify the Monthly Projections REFILLSINCL-RELAYBUYDOWNCOST values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPREFILLSINCL-RELAYBUYDOWNCOST')

  })

  it('Step 14 Verify the Monthly Projections REFILLSINCL-RELAYTOTALCOST values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPREFILLSINCL-RELAYTOTALCOST')

  })

  it('Step 15 Verify the Monthly Projections REFILLSINCL-MCKESSONADMINCOST values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPREFILLSINCL-MCKESSONADMINCOST')

  })

  it('Step 16 Verify the Monthly Projections REFILLSINCL-MCKESSONBUYDOWNCOST values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPREFILLSINCL-MCKESSONBUYDOWNCOST')

  })

  it('Step 17 Verify the Monthly Projections REFILLSINCL-MCKESSONTOTALCOST values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPREFILLSINCL-MCKESSONTOTALCOST')

  })

  it('Step 18 Verify the Monthly Projections REFILLSINCL-TOTALREVENUE values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPREFILLSINCL-TOTALREVENUE')

  })

  it('Step 19 Verify the Monthly Projections REFILLSINCL-GROSSPROFIT values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPREFILLSINCL-GROSSPROFIT')

  })

  it('Step 20 Verify the Monthly Projections REFILLSINCL-GROSSINCREMENTALPROFIT values match with their counterparts in the csv file provided by the Data Scientist', function() {

    AS.TableValidation('MPREFILLSINCL-GROSSINCREMENTALPROFIT')

  })

})

describe('TC 50 - Monthly Projections - NetPrice Alerts when the inserted value is equal or lower than 0', function() {

  it('Step 1. Verify that when a 0 is inserted in one of the NetPrice cells in the scenarios table, the color of the cell border turns red', function() {

    AS.NetPriceZeroValueValidation(3)

  })

  it('Step 2. Verify that when a Neg value is inserted in one of the NetPrice cells in the scenarios table, the color of the cell border turns red', function() {

    AS.NetPriceNegValueValidation(3)

  })

})

describe('TC 51 - Monthly Projections Export Feature', function() {

  it('Step 1 - Export data to Excel and verify the content in the Scenarios results excel sheet', function() {

    AS.ValidateExportImport(9)

  })

})

describe('TC 52 - Monthly Projections - Execution Results - Bell Notifications', function() {

  it('Step 1 - Click on the Bell icon located on the upper right corner of the Access Solutions page and verify that the last Monthly Projections execution didn´t fail, and also that a notification indicating that the results are ready, is included in the icon notifications list', function() {

    AS.CPPBellNotifications(2)

  })

  it('Step 2 - In the notifications list described in Step 1, verify that the last Monthly Projections execution time stamp difference from the current time is not greater than 1 hr', function() {

    AS.CPPBellNotifications(3)

  })

})

